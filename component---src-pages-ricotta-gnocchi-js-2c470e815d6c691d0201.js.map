{"version":3,"file":"component---src-pages-ricotta-gnocchi-js-2c470e815d6c691d0201.js","mappings":"4FAAAA,EAAOC,QAAU,CACfC,aAAc,CACZC,MAAM,yBACNC,YAAY,4JACZC,OAAO,aAETC,WAAW,eACXC,QAAS,CAAC,6BAER,CACEC,QAAQ,2BACRC,QAAS,CACPC,KAAK,SACLC,KAASC,iBANN,iDAWP,CACEJ,QAAQ,yBACRC,QAAS,CACPC,KAAK,yBACLG,WAAW,UACXC,UAAU,IACVC,iBAAiB,UACjBC,YAAY,UACZC,QAAQ,aACRC,KAAK,+BAGT,CACEV,QAAQ,6BACRC,QAAS,CACPU,MAAO,CAAC,eAAD,mBACPF,QAAS,Y,yJChCTX,E,MAAec,GAAAA,WAIjBC,EAA8B,iBADlCC,GAAYC,mBAAqBD,cAI7BE,EAAkB,SAAAC,GACtB,OAAOJ,EAAgBI,EAAMnB,EAAamB,GAkB5C,EAZyB,SAAAC,GACvB,IAAMC,EAAYD,EAAcE,OAAOC,MAAM,KAAKC,KAAI,SAAAC,GAAC,OACrDA,EAAEC,MAAM,WAAaR,EAAgBO,GAAKA,KACzCE,KAAK,KAMR,OALsB,iBACjBP,EADiB,CAEpBE,OAAQD,EACRO,IAAKV,EAAgBE,EAAcQ,Q,wCCvBvC,EAAe,IAA0B,6DCAzC,EAAe,IAA0B,2DCYnCC,EAAS,CACbC,WAAY,UACZC,QAAS,UACTC,aAAc,UACdC,UAAW,UACXC,MAAO,WAGHC,EAAa,CACjBC,YAAa,CACX,CACEzB,QAAS,iBACT0B,IAAK,+DAEP,CACE1B,QAAS,kBAEX,CACEA,QAAS,eAEX,CACEA,QAAS,cAEX,CACEA,QAAS,iBAEX,CACEA,QAAS,yDAGb2B,aAAc,CACZ,CACEC,MAAO,gBACPzC,YACE,0EACF0C,QAAS,8DACTC,IACE,yBAAOC,MAAO,CAAEC,MAAO,oBAAsBC,UAAQ,EAACC,OAAK,EAACC,MAAI,GAC9D,0BAAQlB,IAAKmB,EAAMC,KAAK,gBAI9B,CACET,MAAO,kBACPzC,YACE,2HACF2C,IAAK,uBAAKC,MAAO,CAAEC,MAAO,oBAAsBf,IAAKqB,EAAAA,KAEvD,CACEV,MAAO,eACPzC,YACE,4KACF2C,IACE,yBAAOC,MAAO,CAAEC,MAAO,oBAAsBC,UAAQ,EAACC,OAAK,EAACC,MAAI,GAC9D,0BAAQlB,IAAKsB,EAAMF,KAAK,gBAI9B,CACET,MAAO,iBACPzC,YACE,+IAEJ,CACEyC,MAAO,gBACPzC,YAAa,uCAoDnB,EA/C2B,WAIzB,IAAMqD,GAAQC,EAAAA,EAAAA,gBAAe,cA6BvBC,GAAQC,EAAAA,EAAAA,IAAKC,EAAAA,EAAAA,GAAS,iBAPV,SAAAjB,GAAY,OAC5BA,EAAad,KAAI,SAACgC,EAAMC,GACtB,IAAMC,EAAaP,EAAM,YAAYM,GACrC,OAAOC,GACHC,EAAAA,EAAAA,GAAM,MAAO,gBAAC,IAAD,CAAKC,MAAOF,EAAWG,gBAAgBD,QAAWJ,GAC/DA,OAEgDrB,GACxD,OACE,gBAAC2B,EAAA,EAAD,CAAQC,gBAAiBlC,EAAOC,WAAYkC,WAAW,gBACrD,gBAAC,IAAD,CAAKnE,MAAM,oBACX,gBAACoE,EAAA,EAAD,CACEpE,MAAM,kBACNwD,MAAOA,EACPxB,OAAQA,EACRqC,QAAS,gBAAC,IAAD,CAAKN,MAAOO,EAAiBhB,EAAMiB,KAAKP,gBAAgBD","sources":["webpack://mr.manchego/./gatsby-config.js","webpack://mr.manchego/./src/utils/hackPrefixedPath.js","webpack://mr.manchego/./src/images/ricotta-spread.mp4","webpack://mr.manchego/./src/images/ricotta-form.mp4","webpack://mr.manchego/./src/pages/ricotta-gnocchi.js"],"sourcesContent":["module.exports = {\n  siteMetadata: {\n    title: `Gatsby Default Starter`,\n    description: `Kick off your next, great Gatsby project with this default starter. This barebones starter ships with the main Gatsby configuration files you might need.`,\n    author: `@gatsbyjs`,\n  },\n  pathPrefix: `/mr.manchego`,\n  plugins: [\n    `gatsby-plugin-react-helmet`,\n    {\n      resolve: `gatsby-source-filesystem`,\n      options: {\n        name: `images`,\n        path: `${__dirname}/src/images`,\n      },\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-sharp`,\n    {\n      resolve: `gatsby-plugin-manifest`,\n      options: {\n        name: `gatsby-starter-default`,\n        short_name: `starter`,\n        start_url: `/`,\n        background_color: `#663399`,\n        theme_color: `#663399`,\n        display: `minimal-ui`,\n        icon: `src/images/gatsby-icon.png`, // This path is relative to the root of the site.\n      },\n    },\n    {\n      resolve: `gatsby-plugin-google-fonts`,\n      options: {\n        fonts: [`crimson text`, `Source Sans Pro`],\n        display: \"swap\",\n      },\n    },\n    // this (optional) plugin enables Progressive Web App + Offline functionality\n    // To learn more, visit: https://gatsby.dev/offline\n    // `gatsby-plugin-offline`,\n  ],\n}\n","// see https://github.com/gatsbyjs/gatsby/issues/8479#issuecomment-576067799\nimport config from \"../../gatsby-config\"\nconst { pathPrefix } = config\n\nconst activeEnv =\n  process.env.GATSBY_ACTIVE_ENV || process.env.NODE_ENV || \"development\"\nconst isDevelopment = activeEnv === \"development\"\n\n\nconst getPrefixedPath = url => {\n  return isDevelopment ? url : pathPrefix + url\n}\n\n// fluidImageDef is an internal gatsby data structure. This is prone to break.\n// This replaces urls with proper prefixes to account for a bug that gatsby has\n// regarding gh-pages deployment (see issue linked above).\nconst hackPrefixedPath = fluidImageDef => {\n  const newSrcSet = fluidImageDef.srcSet.split(\" \").map(x => (\n    x.match(\"/static\") ? getPrefixedPath(x) : x\n  )).join(\" \")\n  const newFluidImageDef = {\n    ...fluidImageDef,\n    srcSet: newSrcSet,\n    src: getPrefixedPath(fluidImageDef.src)\n  }\n  return newFluidImageDef\n}\n\nexport default hackPrefixedPath\n","export default __webpack_public_path__ + \"static/ricotta-spread-7c45a7e42638ef5b06f338f55ab19040.mp4\";","export default __webpack_public_path__ + \"static/ricotta-form-68b08b0df0250fafaa920a3f390343e8.mp4\";","import React from \"react\"\nimport { Link, useStaticQuery, graphql } from \"gatsby\"\nimport Img from \"gatsby-image\"\nimport { assoc, lensProp, over } from \"ramda\"\nimport hackPrefixedPath from \"../utils/hackPrefixedPath\"\nimport SEO from \"../components/seo\"\nimport Layout from \"../components/Layout\"\nimport Recipe from \"../components/Recipe\"\nimport gif2 from \"../images/consistency.gif\"\nimport vid1 from \"../images/ricotta-spread.mp4\"\nimport vid3 from \"../images/ricotta-form.mp4\"\n\nconst colors = {\n  background: \"#fffbf7\",\n  primary: \"#ffa500\",\n  primaryMuted: \"#ffe9b8\",\n  secondary: \"#888888\",\n  black: \"#000000\",\n}\n\nconst recipeJSON = {\n  ingredients: [\n    {\n      display: \"12 oz. ricotta\",\n      tip: \"make sure your Ricotta does not contain gums or stabilizers\",\n    },\n    {\n      display: \"1 oz. parmesan\",\n    },\n    {\n      display: \"1 whole egg\",\n    },\n    {\n      display: \"1 egg yolk\",\n    },\n    {\n      display: \"3.5 oz. flour\",\n    },\n    {\n      display: \"sauce to serve (such as tomato basil or butter sage)\",\n    },\n  ],\n  instructions: [\n    {\n      short: \"Drain Ricotta\",\n      description:\n        \"Extract excess moisture from ricotta. Spread ricotta over paper towels.\",\n      caution: \"Be careful not to get pieces of paper towel in the ricotta.\",\n      img: (\n        <video style={{ width: \"min(321px, 100%)\" }} autoPlay muted loop>\n          <source src={vid1} type=\"video/mp4\" />\n        </video>\n      ),\n    },\n    {\n      short: \"Mix Ingredients\",\n      description:\n        \"Mix ricotta, parmesan, flour, egg and egg yolk to even consistency with a spatula. Do not overmix. If needed, add flour.\",\n      img: <img style={{ width: \"min(321px, 100%)\" }} src={gif2} />,\n    },\n    {\n      short: \"Form Gnocchi\",\n      description:\n        \"With heavily floured surfaces, form the mix into gnocchi.\\n\\ni. Divide into equal sizes.\\nii. Roll into logs\\niii. Cut logs into gnocchi\\niv. Sprinkle gnocchi with flour\",\n      img: (\n        <video style={{ width: \"min(321px, 100%)\" }} autoPlay muted loop>\n          <source src={vid3} type=\"video/mp4\" />\n        </video>\n      ),\n    },\n    {\n      short: \"Blanch Gnocchi\",\n      description:\n        \"Blanch the gnocchi, they will rise to the surface when done. Transfer to ice bath to prevent overcooking. Drain, removing any leftover ice.\",\n    },\n    {\n      short: \"Combine Sauce\",\n      description: \"Mix gnocchi with sauce and serve.\",\n    },\n  ],\n}\n\nconst RicottaGnocchiPage = () => {\n  // Gatsby does not allow dynamic queries at runtime. Which means that if I want\n  // to extract a generic Recipe component that uses images, I need to build the\n  // queries for that image and feed those into the component. This is not ideal.\n  const query = useStaticQuery(graphql`\n    fragment itemImage on File {\n      childImageSharp {\n        fluid(maxWidth: 642) {\n          ...GatsbyImageSharpFluid\n        }\n      }\n    }\n    fragment fullPaneImage on File {\n      childImageSharp {\n        fluid(maxWidth: 1400) {\n          ...GatsbyImageSharpFluid\n        }\n      }\n    }\n    query {\n      hero: file(relativePath: { eq: \"overhead.png\" }) {\n        ...fullPaneImage\n      }\n    }\n  `)\n  // map images for each step in JSON for recipe\n  const addImages = instructions =>\n    instructions.map((step, i) => {\n      const queryImage = query[`imageStep${i}`]\n      return queryImage\n        ? assoc(\"img\", <Img fluid={queryImage.childImageSharp.fluid} />, step)\n        : step\n    })\n  const model = over(lensProp(\"instructions\"), addImages, recipeJSON)\n  return (\n    <Layout backgroundColor={colors.background} fontFamily=\"Crimson Text\">\n      <SEO title=\"Ricotta Gnocchi\" />\n      <Recipe\n        title=\"Ricotta Gnocchi\"\n        model={model}\n        colors={colors}\n        heroImg={<Img fluid={hackPrefixedPath(query.hero.childImageSharp.fluid)} />}\n      />\n    </Layout>\n  )\n}\n\nexport default RicottaGnocchiPage\n"],"names":["module","exports","siteMetadata","title","description","author","pathPrefix","plugins","resolve","options","name","path","__dirname","short_name","start_url","background_color","theme_color","display","icon","fonts","config","isDevelopment","process","GATSBY_ACTIVE_ENV","getPrefixedPath","url","fluidImageDef","newSrcSet","srcSet","split","map","x","match","join","src","colors","background","primary","primaryMuted","secondary","black","recipeJSON","ingredients","tip","instructions","short","caution","img","style","width","autoPlay","muted","loop","vid1","type","gif2","vid3","query","useStaticQuery","model","over","lensProp","step","i","queryImage","assoc","fluid","childImageSharp","Layout","backgroundColor","fontFamily","Recipe","heroImg","hackPrefixedPath","hero"],"sourceRoot":""}